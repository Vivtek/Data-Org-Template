=pod

=encoding utf8

=head1 NAME

Data::Org::Template::Cookbook - Simple recipes for my flavor of templates

=head1 DESCRIPTION

I have no memory whatsoever for syntactic detail, which is a significant handicap for a programmer. As a result, I rely on cookbooks, notes, and code snippets to
do the most trivial of things - I can only whip out code quickly when it's entirely non-trivial, like tossing closures around.

This set of examples is therefore really more for my own use than yours, but I hope you find it useful as well.

=head1 BASIC TEMPLATING

=head2 Hello, world

The most fundamental programming task, as we all know, is to greet the entire human race. Here's how you'd do that using a DOTemplate - and of course by changing the
input data you can greet anybody you like.

    use Data::Org::Template;

    my $t = Data::Org::Template->new ("Hello, [[name]]!");
    print $t->text({name => 'world'});

So far, this is no different from any other template engine - we have a field delimited by some kind of special brackets, and the field names a data item in a hashref.
This is just how you set it all up.

=head2 Multiline templates

What I normally do for multiline templates (which is the majority of templates) is this:

    use Data::Org::Template;

    my $t = Data::Org::Template->new (<<'EOF');
    Hello to:
    [[name]]
    EOF
    
    print $t->text({name => 'world'});

=head2 I don't like those [[brackets]]

You can also easily use a different type of bracket.

    use Data::Org::Template;

    my $t = Data::Org::Template->new ("Hello, {name}!", '{}');
    print $t->text({name => 'world'});

=head1 DATA GETTING

So far we've just passed a single hashref to the template when we express it, but we can get fancier than that.

=head2 Register a data getter

You can register a data getter ahead of time so text retrieval will always produce an updated value.

    use Data::Org::Template;

    my $data = {name => 'world'};

    my $t = Data::Org::Template->new ("Hello, {name}!", '{}');
    $t->data_getter ($data);
    
    print $t->text; # --> Hello, world!
    
    $data->{name} = 'Bob';
    print $t->text; # --> Hello, Bob!

=head2 Getting data from multiple sources

All the getters we've used so far have had a single source - one hashref holding values. But in reality, a getter can accept a list of sources.
The getter will consult each source in turn until it gets a defined value.

    use Data::Org::Template;

    my $t = Data::Org::Template->new ("Hello, [[name]]!");
    $t->data_getter({}, {});


 Other things to put in a cookbook:
 - Retrieving values with a formatter
 - Registering your own formatter

 - Building templates directly (handing it the token stream)

 - Conditionals
 - "With" for hashrefs within hashrefs

 - List templates
 - Specific Iterator::Records expression

 - Reading the template as a stream
 - Adding your own transducers

